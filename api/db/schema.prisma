datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  repoUrl     String
  Resume      Resume? @relation(fields: [resumeId], references: [id])
  resumeId    Int?
}

model Education {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  institute String
  level     String
  years     Int
  Resume    Resume? @relation(fields: [resumeId], references: [id])
  resumeId  Int?
}

model JobExperience {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String  @unique
  description String
  company     String?
  location    String?
  url         String?
  years       Int
  Resume      Resume? @relation(fields: [resumeId], references: [id])
  resumeId    Int?
}

model JobAppliedTo {
  id            Int          @id @default(autoincrement())
  title         String       @unique
  description   String?
  company       String?
  location      String?
  url           String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  // resume used
  resume        Resume       @relation(fields: [resumeId], references: [id])
  resumeId      Int
  // user who applied
  UserProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?
}

model Resume {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                 String
  location             String
  contactEmail         String
  contactPhone         String
  summary              String
  programmingLanguages ProgrammingLanguage[]
  skills               Skill[]
  experience           JobExperience[]
  education            Education[]
  projects             Project[]
  // Add more fields as needed
  JobAppliedTo         JobAppliedTo[]
  UserProfile          UserProfile[]
}

model Skill {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  url         String

  Resume   Resume? @relation(fields: [resumeId], references: [id])
  resumeId Int?
}

model ProgrammingLanguage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  color      String
  frameworks Framework[]
  Resume     Resume?     @relation(fields: [resumeId], references: [id])
  resumeId   Int?
}

model Framework {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                   String
  description            String
  githubUrl              String?
  ProgrammingLanguages   ProgrammingLanguage? @relation(fields: [programmingLanguagesId], references: [id])
  programmingLanguagesId Int?
}

model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  name         String
  about_me     String
  image_url    String
  JobAppliedTo JobAppliedTo[]
  resume       Resume         @relation(fields: [resumeId], references: [id])
  resumeId     Int
}
